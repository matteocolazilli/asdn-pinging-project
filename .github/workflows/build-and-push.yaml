name: Build, Push (multi-arch) and Deploy

on:
  push:
    branches:
      - main

jobs:
  # Build e push di pinger-a per linux/amd64 e linux/arm64
  build-pinger-a:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up QEMU (for multi-arch emulation)
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true

      - name: Cache Python dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('app/pinger-a/requirements-dev.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install Python dependencies for linting
        run: pip install -r app/pinger-a/requirements-dev.txt

      - name: Lint with ruff
        run: ruff check ./app/pinger-a

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push pinger-a image (multi-arch)
        uses: docker/build-push-action@v5
        with:
          context: ./app/pinger-a
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/pinger-a:latest
          platforms: linux/amd64,linux/arm64
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Build e push di pinger-b per linux/amd64 e linux/arm64
  build-pinger-b:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up QEMU (for multi-arch emulation)
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true

      - name: Cache Python dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('app/pinger-b/requirements-dev.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install Python dependencies for linting
        run: pip install -r app/pinger-b/requirements-dev.txt

      - name: Lint with ruff
        run: ruff check ./app/pinger-b

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push pinger-b image (multi-arch)
        uses: docker/build-push-action@v5
        with:
          context: ./app/pinger-b
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/pinger-b:latest
          platforms: linux/amd64,linux/arm64
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Deploy su runner self-hosted solo dopo che entrambi i build hanno avuto successo
  deploy-to-clusters:
    runs-on: [self-hosted, kind-${{ matrix.machine_id }}]
    needs:
      - build-pinger-a
      - build-pinger-b
    strategy:
      matrix:
        machine_id: [matteo, davide] # Elenca qui tutti gli identificatori delle macchine
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup kubectl # rimuovi se gi√† installato sul runner
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Apply Kubernetes manifests for app on ${{ matrix.machine_id }}
        run: |
          kubectl apply -f k8s/app/